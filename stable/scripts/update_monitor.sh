#!/bin/bash
# Chuckey Update Monitor - Instant execution via inotify
# This script monitors /chuckey/data/ for update trigger files and executes updates immediately

set -euo pipefail

LOG_FILE="/chuckey/logs/update.log"
DATA_DIR="/chuckey/data"

# Ensure required tools are installed
if ! command -v inotifywait &> /dev/null; then
    echo "ERROR: inotify-tools not installed. Install with: sudo apt-get install inotify-tools" >&2
    exit 1
fi

# Ensure directories exist
mkdir -p "$DATA_DIR"
mkdir -p "$(dirname "$LOG_FILE")"

log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log_message "Chuckey Update Monitor started - watching $DATA_DIR"

# Monitor for file creation events
inotifywait -m -e create,moved_to "$DATA_DIR" --format '%f' | while read -r file; do
    case "$file" in
        update_apps_immediate)
            log_message "=== APPS UPDATE TRIGGERED ==="
            log_message "Executing: /chuckey/scripts/check_and_fetch.sh"

            # Execute apps update and capture output
            if /chuckey/scripts/check_and_fetch.sh >> "$LOG_FILE" 2>&1; then
                log_message "Apps update completed successfully"
            else
                log_message "Apps update failed with exit code $?"
            fi

            # Clean up trigger files
            rm -f "$DATA_DIR"/update_apps_*
            log_message "Apps update trigger files cleaned up"
            ;;

        update_system_immediate)
            log_message "=== SYSTEM UPDATE TRIGGERED ==="
            log_message "Executing: /usr/bin/armbian-upgrade"

            # Execute system update and capture output
            if /usr/bin/armbian-upgrade >> "$LOG_FILE" 2>&1; then
                log_message "System update completed successfully"
            else
                log_message "System update failed with exit code $?"
            fi

            # Clean up trigger files
            rm -f "$DATA_DIR"/update_system_*
            log_message "System update trigger files cleaned up"
            ;;

        setup_change_password)
            log_message "=== CUSTOMER SETUP: PASSWORD CHANGE TRIGGERED ==="

            # Read password from trigger file
            if [ -f "$DATA_DIR/setup_change_password" ]; then
                PASSWORD=$(cat "$DATA_DIR/setup_change_password")

                # Execute password change helper
                if /usr/local/bin/chuckey-change-password "$PASSWORD" >> "$LOG_FILE" 2>&1; then
                    log_message "Password changed successfully"
                else
                    log_message "Password change failed with exit code $?"
                fi

                # Clean up trigger file (contains password, remove immediately)
                rm -f "$DATA_DIR/setup_change_password"
                log_message "Password change trigger file cleaned up"
            fi
            ;;

        setup_change_locale)
            log_message "=== CUSTOMER SETUP: LOCALE CHANGE TRIGGERED ==="

            # Read locale from trigger file
            if [ -f "$DATA_DIR/setup_change_locale" ]; then
                LOCALE=$(cat "$DATA_DIR/setup_change_locale")

                # Write locale to /etc/default/locale
                cat > /etc/default/locale << EOF
#  File generated by chuckey customer setup
LANG="$LOCALE"
LC_ALL="$LOCALE"
LANGUAGE="$LOCALE"
EOF

                if [ $? -eq 0 ]; then
                    log_message "Locale changed to $LOCALE successfully"
                else
                    log_message "Locale change failed with exit code $?"
                fi

                # Clean up trigger file
                rm -f "$DATA_DIR/setup_change_locale"
                log_message "Locale change trigger file cleaned up"
            fi
            ;;

        setup_change_timezone)
            log_message "=== CUSTOMER SETUP: TIMEZONE CHANGE TRIGGERED ==="

            # Read timezone from trigger file
            if [ -f "$DATA_DIR/setup_change_timezone" ]; then
                TIMEZONE=$(cat "$DATA_DIR/setup_change_timezone")

                # Set timezone using timedatectl (also updates /etc/timezone and /etc/localtime)
                if timedatectl set-timezone "$TIMEZONE" >> "$LOG_FILE" 2>&1; then
                    log_message "Timezone changed to $TIMEZONE successfully"
                else
                    log_message "Timezone change failed with exit code $?"
                fi

                # Clean up trigger file
                rm -f "$DATA_DIR/setup_change_timezone"
                log_message "Timezone change trigger file cleaned up"
            fi
            ;;

        *)
            # Ignore other files
            ;;
    esac
done